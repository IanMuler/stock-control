// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(OPERATOR)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts  Account[]
  sessions  Session[]
  movements Movement[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  ADMIN
  OPERATOR
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  products Product[]

  @@map("categories")
}

model Product {
  id          String  @id @default(cuid())
  code        String  @unique
  name        String
  description String?
  unit        String  @default("unidad")
  minStock    Int     @default(0)
  currentStock Int    @default(0)
  categoryId  String?
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category  Category?  @relation(fields: [categoryId], references: [id])
  movements Movement[]
  alerts    Alert[]

  @@map("products")
}

model Movement {
  id          String      @id @default(cuid())
  type        MovementType
  quantity    Int
  description String?
  date        DateTime    @default(now())
  productId   String
  userId      String
  createdAt   DateTime    @default(now())

  product Product @relation(fields: [productId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@map("movements")
}

enum MovementType {
  IN
  OUT
}

model Alert {
  id        String    @id @default(cuid())
  type      AlertType @default(LOW_STOCK)
  message   String
  isRead    Boolean   @default(false)
  productId String?
  createdAt DateTime  @default(now())

  product Product? @relation(fields: [productId], references: [id])

  @@map("alerts")
}

enum AlertType {
  LOW_STOCK
  OUT_OF_STOCK
}
